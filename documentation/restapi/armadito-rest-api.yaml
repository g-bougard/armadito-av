---
swagger: '2.0'

################################################################################
#                              API Information                                 #
################################################################################
info:
  version: "v1"
  title: Armadito REST API

  description: |
    This swagger definition documents the first version of the Armadito antivirus
    API that can be used by any client application to query antivirus status,
    launch a scan, get events....

    ## User agent

    All API paths require a 'User-Agent' HTTP header. If no 'User-Agent' is present,
    a HTTP error `403` (request forbidden) will be returned.

    No check is performed on the User-Agent string, so any non-empty string can
    be used.

    ## Session token

    All API paths (except of course the '/api/register') require a session token
    that is generated by Armadito API.

    The session token must be passed in HTTP header 'X-Armadito-Token'.

    To get a session token, you must first make a GET request to path '/api/register'.
    If request is valid, it will return a JSON object containing a valid token:
    ```json
    {
        "token": "485994620463561099"
    }
    ```

    The token is a string. In current version, this string contains only decimal
    digits, but no assumption must be made about the content of the token string
    and content may change in future versions of the API.
    
    Once you've finished using the API, it is recommended to clean the token
    table using a request to '/api/unregister'.

    ## Request data

    For all requests that need data, these data must be sent as JSON objects in the
    body of a POST request. The 'Content-Type' HTTP header must then be set to
    'application/json', otherwiser an HTTP error `415` 'unsupported media type' will
    be returned.

    ## Error objects

    All responses that do not reply a HTTP `200` OK code will contain a JSON object
    describing the error, for instance:
    ```json
    {
        "code": 415,
        "message": "Unsupported Media Type. Content-Type must be application/json"
    }
    ```

    ## Asynchronous requests

    Most of the API requests are asynchronous, which means that the true result of
    the request will not be contained in the response, but must be queried after
    using a request to the '/api/event' path.

    Typical workflow for an asynchronous request, for instance GET '/api/status'
    (to get the status of the antivirus), is the following:

    * ask for a session token using GET '/api/register'. This will return a JSON
    object containing the token
    * do a GET '/api/status' passing the obtained session token in HTTP header
    'X-Armadito-Token'. This request will not return any data.
    * do a GET '/api/event' passing the obtained session token in HTTP header
    'X-Armadito-Token'. This request will block until an event is ready on the
    server side. This event is returned as a JSON object in the body of the
    response.
    * do a GET '/api/unregister' passing the obtained session token in HTTP header
    'X-Armadito-Token'. This request will not return any data, but will close
    the session. The session token will no longer be valid and must not be
    reused.
    

################################################################################
#                  Host, Base Path, Schemes and Content Types                  #
################################################################################
host: localhost:8888
basePath: /api
schemes:
  - http
produces:
  - application/json
consumes:
  - application/json

################################################################################
#                                   Tags                                       #
################################################################################
tags:
  - name: Session
    description: session management
  - name: Action
    description: antivirus actions
  - name: Event
    description: antivirus events

################################################################################
#                          Common parameters                                   #
################################################################################
parameters:
  token:
    name: X-Armadito-Token
    in: header
    description: |
      The session token, that must be passed in HTTP header for every API request,
      except to the '/api/register' path (which returns a new token).
    type: string
    required: true

################################################################################
#                             Path definitions                                 #
################################################################################
paths:

  /register:
    get:
      tags:
        - Session
      description: |
        Request a new session token.
        
        If request is valid, the response will contain in body a JSON object that
        contains the token:
        
        ```json
        {
            "token": "485994620463561099"
        }
        ```
        
        This token must be stored by the application and sent in HTTP header for
        all requests that need a session token.
      produces:
        - application/json
      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/Token'
        default:
          description: error
          schema:
            $ref: '#/definitions/Error'

  /unregister:
    get:
      tags:
        - Session
      description: |
        Unregister a session token.
        The token must have been obtained from a previous '/register' request.
        If this request return a HTTP 200 OK response, the token will no longer
        be valid and must not be reused.
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/token'
      responses:
        200:
          description: success
          schema:
            $ref: '#/definitions/Token'
        default:
          description: error
          schema:
            $ref: '#/definitions/Error'

  /ping:
    get:
      tags:
        - Action
      description: |
        Ping the server.
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/token'
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/Pong'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /event:
    get:
      tags:
        - Event
      description: |
        Poll server event.

        This request will block until an event is ready on the server side.
        This event is returned as a JSON object in the body of the response.

        This request implements a COMET application model https://en.wikipedia.org/wiki/Comet_(programming)

      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/token'
      responses:
        200:
          description: event received OK
          schema:
            $ref: '#/definitions/Event'

  /scan:
    post:
      tags:
        - Action
      description: |
        Launch a scan
        
        The path to scan is passed as a JSON object in the body of the request.
        
        The scan progress and results will be available by polling '/api/event' once the 
        '/api/scan' request has completed. The events that will then be available are:
        * DetectionEvent
        * OnDemandProgressEvent
        * OnDemandCompletedEvent
        
        Note that this request DOES NOT wait for the end of the scan. As explained earlier,
        this request is asynchronous.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/token'
        - in: body
          name: body
          description: scan object containing the path to scan
          required: true
          schema:
            $ref: "#/definitions/Scan"
      responses:
        200:
          description: OK
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /status:
    get:
      tags:
        - Action
      description: |
        Get the antivirus status.
        
        The antivirus status will be available by polling '/api/event' once the '/api/status' 
        request has completed. The events that will then be available are:
        * StatusEvent
        
        Note that this request DOES NOT return the antivirus status as a JSON object. As 
        explained earlier, this request is asynchronous.
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/token'
      responses:
        200:
          description: OK
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

definitions:

  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string

  Token:
    type: object
    properties:
      token:
        type: string
    
  Pong:
    type: object
    properties:
      status:
        type: string
        enum: 
          - "ok"

  Scan:
    type: object
    properties:
      path:
        type: string
        description: the path to scan
  
  Event:
    description: |
      This is the base class of all events that are available via GET requests to '/api/event'
      
      Events are JSON objects that will always contain an `event_type` key, used as a discriminator
      between different event types.
      
      Currently available 'Event' sub-types are:
      * DetectionEvent
      * OnDemandProgressEvent
      * OnDemandCompletedEvent
      * StatusEvent
      
    type: object
    discriminator: event_type
    required:
      - event_type # required for inheritance to work
    properties:
      event_type:
        type: string

  ScanStatus:
    type: string
    enum: 
      - "undecided"
      - "clean"
      - "ignored"
      - "invalid argument"
      - "internal error"
      - "suspicious"
      - "white listed"
      - "malware"
      - "unknown status"
    description: scan status for path

  DetectionEvent:
    allOf:
      - $ref: '#/definitions/Event'
      - type: object
        properties:
          detection_time:
            type: string
            format: dateTime
            description: detection timestamp
          context:
            type: string
            enum:
              - "real-time"
              - "on-demand"
          path:
            type: string
            description: path
          scan_status:
            $ref: '#/definitions/ScanStatus'
          scan_action:
            type: string
            description: action taken for malware
          module_name:
            type: string
            description: name of scan module that has detected the malware
          module_report:
            type: string
            description: report of scan module that has detected the malware

  OnDemandProgressEvent:
    allOf:
      - $ref: '#/definitions/Event'
      - type: object
        properties:
          progress:
            type: integer
            format: int32
            description: the progress bar
          malware_count:
            type: integer
            format: int32
            description: malware counter
          suspicious_count:
            type: integer
            format: int32
            description: suspicious counter
          scanned_count:
            type: integer
            format: int32
            description: scanned file counter

  OnDemandCompletedEvent:
    allOf:
      - $ref: '#/definitions/Event'
      - type: object
        properties:
          start_time:
            type: string
            format: dateTime
            description: start time of the on-demand scan
          duration:
            type: string
            format: dateTime
            description: duration of the scan
          total_malware_count:
            type: integer
            format: int32
            description: malware counter
          total_suspicious_count:
            type: integer
            format: int32
            description: suspicious counter
          total_scanned_count:
            type: integer
            format: int32
            description: scanned file counter
          # array of detection event

  UpdateStatus:
    type: string
    enum:
      - "up-to-date"
      - "late"
      - "critical"
      - "non-available"
    description: update status of modules and antivirus

  BaseStatus:
    type: object
    properties:
      name:
        type: string
        description: base name
      base_update_timestamp:
        type: integer
        format: int64
        description: base update timestamp
      version:
        type: string
        description: base version if available
      signature_count:
        type: integer
        description: number of signatures in the base
      full_path:
        type: string
        description: full path of the base file if available

  ModuleStatus:
    type: object
    properties:
      name:
        type: string
        description: module name
      mod_status:
        $ref: '#/definitions/UpdateStatus'
      mod_update_timestamp:
        type: integer
        format: int64
        description: module update timestamp
      bases:
        type: array
        items:
          $ref: '#/definitions/BaseStatus'

  StatusEvent:
    allOf:
      - $ref: '#/definitions/Event'
      - type: object
        properties:
          global_status:
            $ref: '#/definitions/UpdateStatus'
          global_update_timestamp:
            type: integer
            format: int64
            description: global update timestamp
          modules:
            type: array
            items:
              $ref: '#/definitions/ModuleStatus'

  #
  # not implemented yet
  #
  AntivirusStatus:
    type: object
    properties:
      version:
        type: string
        description: the version of the antivirus
      service:
        type: boolean
        description: is the service on or off?
      real-time-protection:
        type: boolean
        description: is the real-time protection on or off?

